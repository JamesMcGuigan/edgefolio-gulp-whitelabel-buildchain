/**

// src/_config/_autogenerated/ApiRedirectionConfig.css
ApiRedirectionConfig = {
  server:         'https://edgefolio.com',
  urlRegexp:      '^/api/(?!user/)',
  locationRegexp: '/(investor|manager)-app/'
}

// src/_secret/secretApiTokens.js
secretApiTokens = {
  "https://edgefolio.com": {
    url:   "https://edgefolio.com",
    token: "Token XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
  }
};
**/

angular.module('edgefolio.common-components.routes.apiRedirection', [
  'edgefolio.whitelabel'
]);

angular.module('edgefolio.common-components.routes.apiRedirection').config(function($httpProvider) {
  $httpProvider.interceptors.push('ApiRedirectionInterceptor');
});


angular.module('edgefolio.common-components.routes.apiRedirection')
.factory('ApiRedirectionInterceptor', function($injector, ApiRedirectionConfig) {
  try {
    var secretApiTokens = $injector.get('secretApiTokens');
  } catch(e) {
    secretApiTokens = null;
  }

  return {
    request: function(request) {
      if( secretApiTokens && ApiRedirectionConfig._server ) {
        if( !secretApiTokens[ApiRedirectionConfig._server] ) {
          console.error("apiRedirection.js::request() - ApiRedirectionConfig._server: ", ApiRedirectionConfig._server, ' not found in secretApiTokens: ', _.keys(secretApiTokens) );
        } else {
          if(  request.url.match(ApiRedirectionConfig._urlRegexp)
            && window.location.pathname.match(ApiRedirectionConfig._locationRegexp)
          ) {
            request.url                   = secretApiTokens[ApiRedirectionConfig._server].url + request.url;
            request.headers.Authorization = secretApiTokens[ApiRedirectionConfig._server].token;
          }
        }
      }
      return request;
    }
  }
});


angular.module('edgefolio.common-components.routes.apiRedirection')
.run(function($injector, $http, $cacheFactory, ApiRedirectionConfig) {
  try {
    var secretApiTokens = $injector.get('secretApiTokens');
  } catch(e) {
    secretApiTokens = null;
  }

  if( secretApiTokens && ApiRedirectionConfig._server ) {
    var rewriteUrl = function(url) {
      if(  secretApiTokens[ApiRedirectionConfig._server]
        && secretApiTokens[ApiRedirectionConfig._server].url
        && !_.startsWith(url, secretApiTokens[ApiRedirectionConfig._server].url) // short circuit before more expensive regexp match
        && url.match(ApiRedirectionConfig._urlRegexp)
        && window.location.pathname.match(ApiRedirectionConfig._locationRegexp)
      ) {
        url = secretApiTokens[ApiRedirectionConfig._server].url + url;
      }
      return url;
    };

    $cacheFactory.get('$http') || $http.get('/api/'); // Initialize cache
    var $httpCacheFactory = $cacheFactory.get('$http');
    $httpCacheFactory.get = _.wrap($httpCacheFactory.get, function(func, key) {
      key = rewriteUrl(key);
      return func(key);
    });
    $httpCacheFactory.put = _.wrap($httpCacheFactory.put, function(func, key, value) {
      key = rewriteUrl(key);
      return func(key, value);
    });
    $httpCacheFactory.remove = _.wrap($httpCacheFactory.remove, function(func, key) {
      key = rewriteUrl(key);
      return func(key);
    });
  }
});
