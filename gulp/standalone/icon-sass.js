var _             = require('lodash');
var path          = require('path');
var concat        = require('gulp-concat-util');
var file          = require('gulp-file');
var glob          = require("glob");
var gulp          = require('gulp');
var inject        = require('gulp-inject');
var path          = require('path');
var replace       = require('gulp-regex-replace');
var tap           = require('gulp-tap');
var getImageSize  = require('image-size');
var map           = require('map-stream');
var util          = require('../util/util.js');

_.forIn( global.config["icon-sass"], function(config, appName) {
  var starttag = "/***** START autogenerated 'gulp icon-sass' *****/\n";
  var endtag   = "\n/***** END autogenerated 'gulp icon-sass' *****/";

  var mixin = "@mixin gulp-image($width, $height, $url, $active:false) {\n  " + [
      "width:  $width;",
      "height: $height;",
      "background-size: $width $height;",
      "background-image: url($url);",
      "background-repeat: no-repeat;",
      "background-position: 50% 50%;",
      "display: inline-block;",
      "vertical-align: bottom;",
      "z-index: 1;",
      "@if $active {",
      "  &.selected, &.active         { background-image: url($active); }",
      "  &.image-active-onhover:hover { background-image: url($active); }",
      "}"
    ].join("\n  ") + "\n}\n\n";

  var parse = function(filepath, options) {
    options = _.extend({ parseInactive: true }, options);
    var url  = global.config.mappings.fsToUrl(filepath);
    filepath = global.config.mappings.urlToFs(url);

    var filebase = filepath.replace(/^.*\//, '').replace(/\.\w+$/, '').replace(/\W+/g, '-');
    if( options.parseInactive ) { filebase = filebase.replace(/(-active|-inactive)$/, ''); }
    var rulename = ('image-' + filebase);

    var url  = global.config.mappings.fsToUrl(filepath);
    var dim  = getImageSize(filepath); // { height: 32, width: 32 }
    var pad = {
      name:   Array(Math.max(35 - rulename.length, 0)).join(" "),
      url:    Array(Math.max(65 - url.length,      0)).join(" "),
      width:  Array(Math.max(5  - String(dim.width).length,  0)).join(" "),
      height: Array(Math.max(5  - String(dim.height).length, 0)).join(" ")
    };
    var args = _.flatten([
      pad.width  + "("+dim.width +"px/2)",
      pad.height + "("+dim.height+"px/2)",
      _.unique([
        "'"+url+"'",
        "'"+url.replace(/-inactive\./, '-active.')+"'"
      ])
    ]);

    return {
      url: url,
      filepath: filepath,
      filebase: filebase,
      rulename: rulename,
      dim: dim,
      pad: pad,
      args: args
    };
  };


  gulp.task('icon-sass-'+appName, ['icon-sass-'+appName+'-variables'], function() {
    // BUGFIX: for some reason "return file()" causes gulp to hang - solved by adding { src: true }
    return file(path.basename(config.output.styles), starttag + mixin + endtag, { src: true })
      .pipe(inject(gulp.src(config.files, {read: true}), {
        starttag: starttag + mixin,
        endtag:   endtag,
        transform: function(filepath, file, i, length) {
          if( filepath.match(/-active\.\w+$/) ) { return ""; }

          var image = parse(filepath);
          return '.'+image.rulename + image.pad.name + " { @include gulp-image( " + image.args.join(", ") + " ); }\n";
        }
      }))
      .pipe(gulp.dest(path.dirname(config.output.styles)))
    ;
  });
  gulp.task('icon-sass-'+appName+'-variables', function() {
    // BUGFIX: for some reason "return file()" causes gulp to hang - solved by adding { src: true }
    return file(path.basename(config.output.variables), starttag + mixin + endtag, { src: true })
      .pipe(inject(gulp.src(config.files, {read: true}), {
        starttag: starttag + mixin,
        endtag:   endtag,
        transform: function (filepath, file, i, length) {
          function rules(filepath, options) {
            var image = parse(filepath, options);
            return [
                "$"+image.rulename+"-width:  " + image.pad.name + image.pad.width  + "(" + image.dim.width  + "px/2);",
                "$"+image.rulename+"-height: " + image.pad.name + image.pad.height + "(" + image.dim.height + "px/2);",
                "$"+image.rulename+"-url:    " + image.pad.name + "'"+image.url+"';"
              ].join("     ") + "\n";
          }
          if( filepath.match(/(-active)\.\w+$/) ) {
            return rules(filepath, { parseInactive: false });
          } else if( filepath.match(/(-inactive)\.\w+$/) ) {
            return [
              rules(filepath, { parseInactive: true  }),
              rules(filepath, { parseInactive: false })
            ].join("");
          } else {
            return rules(filepath, { parseInactive: true });
          }
        }
      }))
      //.pipe(map(function(file, callback) {
      //  var text = _(file.contents.toString()).split("\n").unique().join("\n");
      //  file.contents = new Buffer(text, 'binary');
      //  return callback(null, file);
      //}))
      .pipe(gulp.dest(path.dirname(config.output.variables)))
    ;
  });

  // Need to restart gulp if new images are added
  gulp.task('watch-icon-sass-'+appName, function() {
    return gulp.watch(_.flatten(config.files), ['icon-sass-'+appName]);
  });
});
gulp.task('icon-sass',       _(global.config["icon-sass"]).keys().map(function(key) { return 'icon-sass-'+key }).value() );
gulp.task('watch-icon-sass', _(global.config["icon-sass"]).keys().map(function(key) { return 'watch-icon-sass-'+key }).value() );
