var _    = require('lodash');
var path = require('path');
var util = require('./util/util');
var argv = require('yargs').argv;

global.dest = {
  "default": {
    src:        'src/',
    production: 'src/production/'
  },
  "pollyfills": {},
  "manager-app": {
    url:        '/assets/manager_app/',
    root:       'src/manager_app/',
    css:        'src/css/manager_app/',
    sass:       'src/css-scss/manager_app/'
  },
  "investor-app": {
    url:        '/assets/investor_app/',
    root:       'src/investor_app/',
    css:        'src/css/investor_app/',
    sass:       'src/css-scss/investor_app/'
  },
  "common-components": {
    url:        '/assets/common_components/',
    root:       'src/common_components/',
    sass:       'src/common_components/'
  },
  "common-scss": {
    css:        'src/css/common/',
    sass:       'src/css-scss/common/'
  }
};
_.mapValues(global.dest, function(config) { return _.extend(config, global.dest.default);  })


global.config = {
  gulpConfig: ['gulp/config.js', 'gulp/config-autoprefixer.rb' ],
  mappings: {
    urlToFs: function(url)  { return url.replace(new RegExp('^/assets/'), path.join(__dirname, '..', 'src/')); },
    fsToUrl: function(file) { return file.replace(path.join(__dirname, '..'), '').replace('src/', '/assets/').replace('//','/'); },
    absoluteFsToRelativeFs: function(file) { return file.replace(path.join(__dirname,'../'), '') },
    relativeFsToAbsoluteFs: function(file) { return path.join(__dirname,'../', file); }
  },
  clean: {
    "production":    ['src/production/'],
    "whitelabel":    ['src/whitelabel/'],
    "css":           ['src/css/', 'src/**/css/'],
    "autogenerated": [
      'src/_config/_autogenerated/',
      'src/css-scss/autogenerated/', // TODO: remove - previous directory name
      'src/css-scss/_autogenerated/'
    ]
  },
  whitelabel: {
    "css": {
      vars_file:  'src/css-scss/_autogenerated/whitelabel-css-variables.scss',
      rules_file: 'src/css-scss/_autogenerated/whitelabel-css.scss'
    },
    // task: 'inject-whitelabel-html-'+environment+'-'+appName
    html: {
      idName:    'whitelabel-'+argv.whitelabel,
      className: 'whitelabel-'+argv.whitelabel
    },
    //// task: whitelabel-images
    //images: {
    //  input_glob: [
    //    'src/images/_default/**/*',
    //    'src/images/'+argv.whitelabel+'/**/*'
    //  ],
    //  output_dir: 'src/whitelabel/images/'
    //},
    filesystem: {
      mapping_file: 'src/whitelabel/_whitelabel_filesystem.json',
      input_glob: [
        'src/images/**/*.{jpeg,jpg,png,gif,svg,htm,html,hbs,pdf,json}',
        'src/common_components/**/*.{jpeg,jpg,png,gif,svg,htm,html,hbs,pdf,json}',
        'src/enterprise/**/*.{jpeg,jpg,png,gif,svg,htm,html,hbs,pdf,json}',
        'src/homepage/**/*.{jpeg,jpg,png,gif,svg,htm,html,hbs,pdf,json}',
        'src/investor_app/**/*.{jpeg,jpg,png,gif,svg,htm,html,hbs,pdf,json}',
        'src/manager_app/**/*.{jpeg,jpg,png,gif,svg,htm,html,hbs,pdf,json}'
      ],
      src_mapping: function(filepath) {
        // first existent filepath is chosen
        return [
          filepath.replace(/(.*)\.(\w+)$/, '$1.whitelabel.'+argv.whitelabel+'.$2'),
          filepath.replace('/_default/', '/'+argv.whitelabel+'/'),
          filepath
        ];
      },
      dest_mapping: function(filepath) {
        // first existent filepath is chosen
        return filepath
        .replace('.whitelabel.'+argv.whitelabel+'.', '.')
        .replace('/'+argv.whitelabel+'/', '/')
        .replace('/_default/', '/')
          ;
      },
      dest_reject: function(filepath) {
        var whitelabels = util.getAllWhitelabels(); // includes _default
        return _.any(whitelabels, function(whitelabel) {
          return _.contains(filepath, '.whitelabel.'+whitelabel+'.')
                 || _.contains(filepath, '/'+whitelabel+'/')
            ;
        });
      },
      input_dir:  'src/',
      output_dir: 'src/whitelabel/'
    },
    // task: whitelabel-json
    json: {
      interpolatePrefix: '$',
      angularModule: 'edgefolio.whitelabel',
      input_glob: [
        'src/_config/_default/*.json',
        'src/_config/'+argv.whitelabel+'/*.json'
      ],
      output_dir: 'src/_config/_autogenerated/'
    },
    // task: 'sass-'+environment
    sass: {
      importerOptions: {
        roots: [
          '',
          'src/css-scss/'  // COPYPASTE: global.config.sass.sassDir
        ],
        paths: [
          '{url}',
          '{url}.whitelabel.'+argv.whitelabel,
          function(filepath) { return filepath.replace('/_default/', '/'+argv.whitelabel+'/');  },
        ],
        filePrefixes: [
          '',
          '_'
        ],
        fileExtensions: [
          '',
          '.scss',
          '.sass'
        ]
      }
    },
    includes: {
      // util/util.js::extractIncludes()
      importerSearchFunctions: [
        function(path) { return path.replace(/^(.*)\/([^/.]+?)\.(.*)$/, '$1/$2.whitelabel.'+argv.whitelabel+'.$3');  },
        function(path) { return path.replace('/_default/', '/'+argv.whitelabel+'/');  }
      ]
    }
  },
  browserify: {
    output_dir: "src/production/browserify/",
    modules:    [
      "compute-kurtosis",
      "compute-covariance"
    ]
  },
  test: {
    config: {
      unit: 'tests/karma.conf.js',
      e2e:  'tests/protractor.conf.js'
    }
  },
  autoprefixer: ['> 1%', 'Last 4 versions', 'Firefox ESR', 'Firefox 4', 'safari 4', 'ie 6', 'ie 7', 'ie 8', 'ie 9', 'opera 12.1', 'ios 6', 'android 4'],
  sass: {
    files:   [
      'src/css-scss/**/*{.scss,.sass}',
      'src/common_components/angular/components/**/*{.scss,.sass}',
      'src/enterprise/**/*{.scss,.sass}',
      'src/_config/**/*{.scss,.sass}'
    ],
    sassDir: 'src/css-scss/', // COPYPASTE: global.config.whitelabel.sass.importerOptions.roots
    cssDir:  'src/css/'
  },
  'icon-sass': { // standalone task
    "common-components": {
      files: 'src/whitelabel/images/**/*.{jpeg,jpg,png,gif,svg}',
      output: {
        styles:    'src/css-scss/_autogenerated/icons-gulp.scss',
        variables: 'src/css-scss/_autogenerated/icons-gulp-variables.scss'
      }
    }
  },
  templates: {
    "manager-app":       { standalone: false, files: 'src/whitelabel/manager_app/**/*.html',       root: '/assets/whitelabel/manager_app/',       filename: 'edgefolio-managerapp-templates.js',  module: "edgefolio.manager-app.templates"       },
    "investor-app":      { standalone: false, files: 'src/whitelabel/investor_app/**/*.html',      root: '/assets/whitelabel/investor_app/',      filename: 'edgefolio-investorapp-templates.js', module: "edgefolio.investor-app.templates"      },
    "common-components": { standalone: false, files: 'src/whitelabel/common_components/**/*.html', root: '/assets/whitelabel/common_components/', filename: 'edgefolio-common-templates.js',      module: "edgefolio.common-components.templates" }
  },
  "image-precache": {
    "manager-app":       { filename: 'edgefolio-managerapp-imageprecache.css'  },
    "investor-app":      { filename: 'edgefolio-investorapp-imageprecache.css' }
  },
  "includes-json": {
    "pollyfills":        { output: "edgefolio-pollyfills-includes.json"  },
    "manager-app":       { output: "edgefolio-managerapp-includes.json"  },
    "investor-app":      { output: "edgefolio-investorapp-includes.json" }
  },
  "minify-js": {
    "pollyfills": {
      extractIncludes: [
        path.join(global.dest["common-components"].root, "pollyfills.includes.conf")
      ],
      output: {
        libs: "edgefolio-pollyfills-js-libs.js" // -js-libs.js extension needed for unit tests
      },
      "includes-json": "edgefolio-pollyfills-includes.json"
    },
    "manager-app": {
      extractIncludes: [
        path.join(global.dest["common-components"].root, "common.includes.conf"),
        path.join(global.dest["manager-app"].root,       "managerapp.includes.conf"),
        path.join(global.dest["default"].src,            "_secret/secret.includes.conf") // in .gitignore
      ],
      output: {
        libs: "edgefolio-managerapp-js-libs.js",
        code: "edgefolio-managerapp-js-code.js",
        init: "edgefolio-managerapp-js-init.js"
      },
      "includes-json": "edgefolio-managerapp-includes.json"
    },
    "investor-app": {
      extractIncludes: [
        path.join(global.dest["common-components"].root, "common.includes.conf"),
        path.join(global.dest["investor-app"].root,      "investorapp.includes.conf"),
        path.join(global.dest["default"].src,            "_secret/secret.includes.conf") // in .gitignore
      ],
      output: {
        libs: "edgefolio-investorapp-js-libs.js",
        code: "edgefolio-investorapp-js-code.js",
        init: "edgefolio-investorapp-js-init.js"
      },
      "includes-json": "edgefolio-investorapp-includes.json"
    }
  },
  "copy-index": {
    "manager-app":  { source: path.join(global.dest["manager-app"].root,  "index.html"), output: "edgefolio-managerapp-index.html",   "unoptimized": "edgefolio-managerapp-index-unoptimized.html"  },
    "investor-app": { source: path.join(global.dest["investor-app"].root, "index.html"), output: "edgefolio-investorapp-index.html",  "unoptimized": "edgefolio-investorapp-index-unoptimized.html" }
  }
};

global.config.inject = {
  "investor-app": {
    default: {
      css: _.flatten([
        global.dest["common-scss"].css  + 'edgefolio-libs.css',
        global.dest["common-scss"].css  + 'edgefolio-base.css',
        global.dest["investor-app"].css + 'edgefolio-investor-app.css',
        global.dest["common-scss"].css  + 'edgefolio-print.css'
      ]),
      js: _.flatten([
        'src/common_components/pollyfills.includes.conf',
        'src/common_components/common.includes.conf',
        path.join(global.dest["investor-app"].root, "investorapp.includes.conf")
      ])
    }
  },
  "manager-app": {
    default: {
      css: _.flatten([
        global.dest["common-scss"].css + 'edgefolio-libs.css',
        global.dest["common-scss"].css + 'edgefolio-base.css',
        global.dest["manager-app"].css + 'edgefolio-manager-app.css',
        global.dest["common-scss"].css + 'edgefolio-print.css'
      ]),
      js: _.flatten([
        'src/common_components/pollyfills.includes.conf',
        'src/common_components/common.includes.conf',
        path.join(global.dest["manager-app"].root, "managerapp.includes.conf")
      ])
    }
  }
};
_.merge(global.config.inject, {
  "investor-app": {
    test:        _.cloneDeep(global.config.inject["investor-app"].default),
    development: _.cloneDeep(global.config.inject["investor-app"].default),
    staging:     _.cloneDeep(global.config.inject["investor-app"].default),
    production:  _.cloneDeep(global.config.inject["investor-app"].default)
  },
  "manager-app": {
    test:        _.cloneDeep(global.config.inject["manager-app"].default),
    development: _.cloneDeep(global.config.inject["manager-app"].default),
    staging:     _.cloneDeep(global.config.inject["manager-app"].default),
    production:  _.cloneDeep(global.config.inject["manager-app"].default)
  }
});
_.merge(global.config.inject, {
  "manager-app": {
    test: {
      js: _.flatten([
        global.config.inject["manager-app"].default.js,
        global.dest["manager-app"].production       + "edgefolio-managerapp-templates.js",
        global.dest["common-components"].production + "edgefolio-common-templates.js"
      ])
    },
    development: {
      js: _.flatten([
        global.config.inject["manager-app"].default.js,
        "src/common_components/angular/window.debugging.js",
        "src/_secret/secret.includes.conf"
      ])
    },
    staging: {
      js: [
        global.dest["common-components"].production + "edgefolio-pollyfills-js-libs.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-js-libs.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-js-code.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-templates.js",
        global.dest["common-components"].production + "edgefolio-common-templates.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-js-init.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-imageprecache.css",
        "src/common_components/angular/window.debugging.js",
        "src/_secret/secret.includes.conf"
      ]
    },
    production: {
      js: [
        global.dest["common-components"].production + "edgefolio-pollyfills-js-libs.min.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-js-libs.min.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-js-code.min.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-templates.js",
        global.dest["common-components"].production + "edgefolio-common-templates.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-js-init.min.js",
        global.dest["manager-app"].production       + "edgefolio-managerapp-imageprecache.css",
        "src/common_components/angular/window.debugging.js"
      ]
    }
  },
  "investor-app": {
    test: {
      js: _.flatten([
        global.config.inject["investor-app"].default.js,
        global.dest["investor-app"].production      + "edgefolio-investorapp-templates.js",
        global.dest["common-components"].production + "edgefolio-common-templates.js",
        "src/common_components/angular/window.debugging.js"
      ])
    },
    development: {
      js: _.flatten([
        global.config.inject["investor-app"].default.js,
        "src/common_components/angular/window.debugging.js",
        "src/_secret/secret.includes.conf"
      ])
    },
    staging:  {
      js: [
        global.dest["common-components"].production + "edgefolio-pollyfills-js-libs.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-js-libs.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-js-code.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-templates.js",
        global.dest["common-components"].production + "edgefolio-common-templates.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-imageprecache.css",
        "src/common_components/angular/window.debugging.js",
        "src/_secret/secret.includes.conf"
      ]
    },
    production:  {
      js: [
        global.dest["common-components"].production + "edgefolio-pollyfills-js-libs.min.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-js-libs.min.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-js-code.min.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-templates.js",
        global.dest["common-components"].production + "edgefolio-common-templates.js",
        global.dest["investor-app"].production      + "edgefolio-investorapp-imageprecache.css"
      ]
    }
  }
});




global.dest["enterprise-documentation"] = _.cloneDeep(global.dest.default);
_.merge(global.config, {
  "copy-index": {
    "enterprise-documentation": {
      source:      "src/enterprise/documentation/html/index.html",
      output:      "enterprise-documentation-index.html",
      unoptimized: "enterprise-documentation-unoptimized.html"
    }
  },
  "includes-json": {
    "enterprise-documentation":  { output: "enterprise-documentation.json" }
  },
  templates: {
    "enterprise-documentation": {
      standalone: false,
      files:     "src/enterprise/documentation/html/**/!(index).html",
      root:      "/assets/src/enterprise/documentation/html/",
      filename:  "enterprise-documentation-templates.js",
      module:    "edgefolio.enterprise.templates"
    }
  },
  inject: {
    "enterprise-documentation": {
      default: {
        css: _.flatten([
          global.dest["common-scss"].css + 'edgefolio-libs.css',
          global.dest["common-scss"].css + 'edgefolio-base.css'
        ]),
        js: _.flatten([
          'src/enterprise/models/_models.includes.conf',
          'src/enterprise/documentation/_enterprise-documentation.includes.conf',
          'src/_secret/secret.includes.conf'
        ])
      }
    }
  }
});
_.merge(global.config.inject, {
  "enterprise-documentation": {
    test:        _.cloneDeep(global.config.inject["enterprise-documentation"].default),
    development: _.cloneDeep(global.config.inject["enterprise-documentation"].default),
    staging:     _.cloneDeep(global.config.inject["enterprise-documentation"].default),
    production:  _.cloneDeep(global.config.inject["enterprise-documentation"].default)
  }
});
// console.log("config.js:236:", "global.config.inject", JSON.stringify(global.config.inject, null, 2));
